import java.util.*;

public class KnightsPortals {
    public int shortestPath(int[][] grid) {
        int n = grid.length;
        int[][][] dist = new int[n][n][2];
        for (int[][] a : dist)
            for (int[] b : a) Arrays.fill(b, Integer.MAX_VALUE);
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        List<int[]> empties = new ArrayList<>();
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                if (grid[i][j] == 0) empties.add(new int[]{i,j});

        Queue<int[]> q = new LinkedList<>();
        dist[0][0][0] = 0;
        q.offer(new int[]{0,0,0});

        while (!q.isEmpty()) {
            var cur = q.poll();
            int r = cur[0], c = cur[1], used = cur[2];
            int d = dist[r][c][used];
            if (r == n-1 && c == n-1) return d;

            for (var dir : dirs) {
                int nr = r + dir[0], nc = c + dir[1];
                if (nr>=0&&nc>=0&&nr<n&&nc<n && grid[nr][nc]==0 &&
                    dist[nr][nc][used] > d+1) {
                    dist[nr][nc][used] = d+1;
                    q.offer(new int[]{nr, nc, used});
                }
            }

            if (used == 0) {
                for (var e : empties) {
                    int nr = e[0], nc = e[1];
                    if (nr != r || nc != c) {
                        if (dist[nr][nc][1] > d+1) {
                            dist[nr][nc][1] = d+1;
                            q.offer(new int[]{nr, nc, 1});
                        }
                    }
                }
            }
        }
        return -1;
    }
}
