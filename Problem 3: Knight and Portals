import java.util.*;

public class KnightsPortals {
    public static int shortest(int[][] g) {
        int n = g.length;
        int[][][] d = new int[n][n][2];
        for (int[][] a : d) for (int[] b : a) Arrays.fill(b, Integer.MAX_VALUE);
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        List<int[]> empty = new ArrayList<>();
        for (int i=0;i<n;i++) for (int j=0;j<n;j++)
            if (g[i][j]==0) empty.add(new int[]{i,j});
        Deque<int[]> q = new ArrayDeque<>();
        d[0][0][0]=0; q.add(new int[]{0,0,0});

        while (!q.isEmpty()) {
            var cur = q.poll();
            int r=cur[0], c=cur[1], used=cur[2];
            int dist = d[r][c][used];
            if (r==n-1 && c==n-1) return dist;
            for (var dd : dirs) {
                int nr=r+dd[0], nc=c+dd[1];
                if (nr>=0&&nc>=0&&nr<n&&nc<n && g[nr][nc]==0 && d[nr][nc][used]>dist+1) {
                    d[nr][nc][used] = dist+1;
                    q.add(new int[]{nr,nc,used});
                }
            }
            if (used==0) {
                for (var e : empty) {
                    int nr=e[0], nc=e[1];
                    if (nr!=r||nc!=c && d[nr][nc][1]>dist+1) {
                        d[nr][nc][1] = dist+1;
                        q.add(new int[]{nr,nc,1});
                    }
                }
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int[][] g = {
            {0,1,0},
            {0,0,0},
            {1,0,0}
        };
        System.out.println(shortest(g));  // e.g. result
    }
}
