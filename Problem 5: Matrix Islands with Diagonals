public class MatrixIslands {
    public static int count(int[][] g) {
        int n=g.length, m=g[0].length, count=0;
        boolean[][] v=new boolean[n][m];
        int[][] dirs={{1,0},{-1,0},{0,1},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};
        for (int i=0;i<n;i++) {
            for (int j=0;j<m;j++) {
                if (g[i][j]==1 && !v[i][j]) {
                    dfs(g, v, i, j, dirs);
                    count++;
                }
            }
        }
        return count;
    }

    private static void dfs(int[][] g, boolean[][] v, int i, int j, int[][] dirs) {
        Deque<int[]> st = new ArrayDeque<>();
        v[i][j] = true; st.push(new int[]{i,j});
        while (!st.isEmpty()) {
            var cur = st.pop();
            for (var d : dirs) {
                int ni=cur[0]+d[0], nj=cur[1]+d[1];
                if (ni>=0 && nj>=0 && ni<g.length && nj<g[0].length
                    && g[ni][nj]==1 && !v[ni][nj]) {
                    v[ni][nj]=true;
                    st.push(new int[]{ni,nj});
                }
            }
        }
    }

    public static void main(String[] args) {
        int[][] grid = {{1,0,1},{0,1,0},{1,0,1}};
        System.out.println(count(grid));  // 5
    }
}
